{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/MedBALBSIR/PC-labs-MLF-BALBSIR-Mohammed/blob/main/LAB%203%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# SVM for classification"
      ],
      "metadata": {
        "id": "qpzybxGIwnuz"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Load IRIS dataset, check its contents:\n"
      ],
      "metadata": {
        "id": "eMcpNqv-uk-K"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0Pw3iTT7-brT",
        "outputId": "1d185d8d-4dac-4d98-ae84-5ea3ffaf34dd"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)', 'petal width (cm)']\n",
            "[[5.1 3.5 1.4 0.2]\n",
            " [4.9 3.  1.4 0.2]\n",
            " [4.7 3.2 1.3 0.2]\n",
            " [4.6 3.1 1.5 0.2]\n",
            " [5.  3.6 1.4 0.2]]\n",
            "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
            " 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n",
            " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2\n",
            " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n",
            " 2 2]\n",
            "[[5.1 3.5 1.4 0.2]\n",
            " [4.9 3.  1.4 0.2]\n",
            " [4.7 3.2 1.3 0.2]\n",
            " [4.6 3.1 1.5 0.2]\n",
            " [5.  3.6 1.4 0.2]\n",
            " [5.4 3.9 1.7 0.4]\n",
            " [4.6 3.4 1.4 0.3]\n",
            " [5.  3.4 1.5 0.2]\n",
            " [4.4 2.9 1.4 0.2]\n",
            " [4.9 3.1 1.5 0.1]\n",
            " [5.4 3.7 1.5 0.2]\n",
            " [4.8 3.4 1.6 0.2]\n",
            " [4.8 3.  1.4 0.1]\n",
            " [4.3 3.  1.1 0.1]\n",
            " [5.8 4.  1.2 0.2]\n",
            " [5.7 4.4 1.5 0.4]\n",
            " [5.4 3.9 1.3 0.4]\n",
            " [5.1 3.5 1.4 0.3]\n",
            " [5.7 3.8 1.7 0.3]\n",
            " [5.1 3.8 1.5 0.3]\n",
            " [5.4 3.4 1.7 0.2]\n",
            " [5.1 3.7 1.5 0.4]\n",
            " [4.6 3.6 1.  0.2]\n",
            " [5.1 3.3 1.7 0.5]\n",
            " [4.8 3.4 1.9 0.2]\n",
            " [5.  3.  1.6 0.2]\n",
            " [5.  3.4 1.6 0.4]\n",
            " [5.2 3.5 1.5 0.2]\n",
            " [5.2 3.4 1.4 0.2]\n",
            " [4.7 3.2 1.6 0.2]\n",
            " [4.8 3.1 1.6 0.2]\n",
            " [5.4 3.4 1.5 0.4]\n",
            " [5.2 4.1 1.5 0.1]\n",
            " [5.5 4.2 1.4 0.2]\n",
            " [4.9 3.1 1.5 0.2]\n",
            " [5.  3.2 1.2 0.2]\n",
            " [5.5 3.5 1.3 0.2]\n",
            " [4.9 3.6 1.4 0.1]\n",
            " [4.4 3.  1.3 0.2]\n",
            " [5.1 3.4 1.5 0.2]\n",
            " [5.  3.5 1.3 0.3]\n",
            " [4.5 2.3 1.3 0.3]\n",
            " [4.4 3.2 1.3 0.2]\n",
            " [5.  3.5 1.6 0.6]\n",
            " [5.1 3.8 1.9 0.4]\n",
            " [4.8 3.  1.4 0.3]\n",
            " [5.1 3.8 1.6 0.2]\n",
            " [4.6 3.2 1.4 0.2]\n",
            " [5.3 3.7 1.5 0.2]\n",
            " [5.  3.3 1.4 0.2]\n",
            " [7.  3.2 4.7 1.4]\n",
            " [6.4 3.2 4.5 1.5]\n",
            " [6.9 3.1 4.9 1.5]\n",
            " [5.5 2.3 4.  1.3]\n",
            " [6.5 2.8 4.6 1.5]\n",
            " [5.7 2.8 4.5 1.3]\n",
            " [6.3 3.3 4.7 1.6]\n",
            " [4.9 2.4 3.3 1. ]\n",
            " [6.6 2.9 4.6 1.3]\n",
            " [5.2 2.7 3.9 1.4]\n",
            " [5.  2.  3.5 1. ]\n",
            " [5.9 3.  4.2 1.5]\n",
            " [6.  2.2 4.  1. ]\n",
            " [6.1 2.9 4.7 1.4]\n",
            " [5.6 2.9 3.6 1.3]\n",
            " [6.7 3.1 4.4 1.4]\n",
            " [5.6 3.  4.5 1.5]\n",
            " [5.8 2.7 4.1 1. ]\n",
            " [6.2 2.2 4.5 1.5]\n",
            " [5.6 2.5 3.9 1.1]\n",
            " [5.9 3.2 4.8 1.8]\n",
            " [6.1 2.8 4.  1.3]\n",
            " [6.3 2.5 4.9 1.5]\n",
            " [6.1 2.8 4.7 1.2]\n",
            " [6.4 2.9 4.3 1.3]\n",
            " [6.6 3.  4.4 1.4]\n",
            " [6.8 2.8 4.8 1.4]\n",
            " [6.7 3.  5.  1.7]\n",
            " [6.  2.9 4.5 1.5]\n",
            " [5.7 2.6 3.5 1. ]\n",
            " [5.5 2.4 3.8 1.1]\n",
            " [5.5 2.4 3.7 1. ]\n",
            " [5.8 2.7 3.9 1.2]\n",
            " [6.  2.7 5.1 1.6]\n",
            " [5.4 3.  4.5 1.5]\n",
            " [6.  3.4 4.5 1.6]\n",
            " [6.7 3.1 4.7 1.5]\n",
            " [6.3 2.3 4.4 1.3]\n",
            " [5.6 3.  4.1 1.3]\n",
            " [5.5 2.5 4.  1.3]\n",
            " [5.5 2.6 4.4 1.2]\n",
            " [6.1 3.  4.6 1.4]\n",
            " [5.8 2.6 4.  1.2]\n",
            " [5.  2.3 3.3 1. ]\n",
            " [5.6 2.7 4.2 1.3]\n",
            " [5.7 3.  4.2 1.2]\n",
            " [5.7 2.9 4.2 1.3]\n",
            " [6.2 2.9 4.3 1.3]\n",
            " [5.1 2.5 3.  1.1]\n",
            " [5.7 2.8 4.1 1.3]\n",
            " [6.3 3.3 6.  2.5]\n",
            " [5.8 2.7 5.1 1.9]\n",
            " [7.1 3.  5.9 2.1]\n",
            " [6.3 2.9 5.6 1.8]\n",
            " [6.5 3.  5.8 2.2]\n",
            " [7.6 3.  6.6 2.1]\n",
            " [4.9 2.5 4.5 1.7]\n",
            " [7.3 2.9 6.3 1.8]\n",
            " [6.7 2.5 5.8 1.8]\n",
            " [7.2 3.6 6.1 2.5]\n",
            " [6.5 3.2 5.1 2. ]\n",
            " [6.4 2.7 5.3 1.9]\n",
            " [6.8 3.  5.5 2.1]\n",
            " [5.7 2.5 5.  2. ]\n",
            " [5.8 2.8 5.1 2.4]\n",
            " [6.4 3.2 5.3 2.3]\n",
            " [6.5 3.  5.5 1.8]\n",
            " [7.7 3.8 6.7 2.2]\n",
            " [7.7 2.6 6.9 2.3]\n",
            " [6.  2.2 5.  1.5]\n",
            " [6.9 3.2 5.7 2.3]\n",
            " [5.6 2.8 4.9 2. ]\n",
            " [7.7 2.8 6.7 2. ]\n",
            " [6.3 2.7 4.9 1.8]\n",
            " [6.7 3.3 5.7 2.1]\n",
            " [7.2 3.2 6.  1.8]\n",
            " [6.2 2.8 4.8 1.8]\n",
            " [6.1 3.  4.9 1.8]\n",
            " [6.4 2.8 5.6 2.1]\n",
            " [7.2 3.  5.8 1.6]\n",
            " [7.4 2.8 6.1 1.9]\n",
            " [7.9 3.8 6.4 2. ]\n",
            " [6.4 2.8 5.6 2.2]\n",
            " [6.3 2.8 5.1 1.5]\n",
            " [6.1 2.6 5.6 1.4]\n",
            " [7.7 3.  6.1 2.3]\n",
            " [6.3 3.4 5.6 2.4]\n",
            " [6.4 3.1 5.5 1.8]\n",
            " [6.  3.  4.8 1.8]\n",
            " [6.9 3.1 5.4 2.1]\n",
            " [6.7 3.1 5.6 2.4]\n",
            " [6.9 3.1 5.1 2.3]\n",
            " [5.8 2.7 5.1 1.9]\n",
            " [6.8 3.2 5.9 2.3]\n",
            " [6.7 3.3 5.7 2.5]\n",
            " [6.7 3.  5.2 2.3]\n",
            " [6.3 2.5 5.  1.9]\n",
            " [6.5 3.  5.2 2. ]\n",
            " [6.2 3.4 5.4 2.3]\n",
            " [5.9 3.  5.1 1.8]]\n"
          ]
        }
      ],
      "source": [
        "from sklearn.datasets import load_iris\n",
        "iris=load_iris()\n",
        "iris.feature_names\n",
        "print(iris.feature_names)\n",
        "print(iris.data[0:5,:])\n",
        "print(iris.target)\n",
        "print(iris.data)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Split data into training and testing parts:"
      ],
      "metadata": {
        "id": "H5VBL_QBussh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "X=iris.data\n",
        "y=iris.target\n",
        "X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2)\n",
        "print(X_train.shape)\n",
        "print(X_test.shape)"
      ],
      "metadata": {
        "id": "rDk-PobDtp7b",
        "outputId": "5011f8f8-1dff-44db-d21f-c99b0df49796",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(120, 4)\n",
            "(30, 4)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Use a Support Vector Machine for classification:\n"
      ],
      "metadata": {
        "id": "3hjR3_OOuzZO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.svm import SVC\n",
        "SVMmodel=SVC(kernel='linear')\n",
        "SVMmodel.fit(X_train,y_train)\n",
        "SVMmodel.get_params()\n",
        "SVMmodel.score(X_test,y_test)"
      ],
      "metadata": {
        "id": "XKbwK1yht2In",
        "outputId": "8627d473-c57e-4429-d3c7-3a010a18ba74",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1.0"
            ]
          },
          "metadata": {},
          "execution_count": 91
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Let's explore more now.\n",
        "\n",
        "*   Choose only first two features (columns) of iris.data\n",
        "*   SVM is in its basic form a 2-class classifier, so eliminate iris.target =2 from the data\n",
        "\n"
      ],
      "metadata": {
        "id": "XlCNzZsau7gg"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "id": "nYdW9o1GhwFA",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0299a79c-fa34-4682-b97c-ee74cf27288f"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1.0"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ],
      "source": [
        "from sklearn.datasets import load_iris\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.svm import SVC\n",
        "\n",
        "# Load the Iris dataset\n",
        "iris = load_iris()\n",
        "\n",
        "# Select the first two features (sepal length and sepal width)\n",
        "X = iris.data[:, :2]\n",
        "\n",
        "# Select only two classes (0 and 1, excluding class 2)\n",
        "y = iris.target\n",
        "X = X[y != 2]\n",
        "y = y[y != 2]\n",
        "\n",
        "# Split the data into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Create and train the SVM model\n",
        "SVMmodel = SVC(kernel='linear')\n",
        "SVMmodel.fit(X_train, y_train)\n",
        "\n",
        "# Evaluate the model\n",
        "SVMmodel.score(X_test, y_test)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Plot scatterplots of targets 0 and 1 and check the separability of the classes:"
      ],
      "metadata": {
        "id": "Vx6fPm3KvlyH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Plot the data points for class 0 (Setosa)\n",
        "plt.scatter(X[y == 0, 0], X[y == 0, 1], color='red', label='Setosa (Class 0)', marker='o')\n",
        "\n",
        "# Plot the data points for class 1 (Versicolor)\n",
        "plt.scatter(X[y == 1, 0], X[y == 1, 1], color='blue', label='Versicolor (Class 1)', marker='x')\n",
        "\n",
        "# Add labels and legend\n",
        "plt.xlabel('Sepal Length (cm)')\n",
        "plt.ylabel('Sepal Width (cm)')\n",
        "plt.title('Scatterplot of Setosa vs Versicolor')\n",
        "plt.legend()\n",
        "\n",
        "# Show the plot\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "flQWBul_ZYjK",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "outputId": "a8b0b8d1-acbc-4311-ebe7-d1610e2c7539"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAjcAAAHHCAYAAABDUnkqAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAcMhJREFUeJzt3XlYVGX7B/DvsIss4sKiIAjivoGaggvghksluaRmKub2lqamr1tZmpaWLWaZZfWmpVmm4pK7FhjihgvuuaLgguQCggsIPL8/5jcDAwPMwAxz5vD9XNdcOM9Z5j7PDMztOc95boUQQoCIiIhIJixMHQARERGRITG5ISIiIllhckNERESywuSGiIiIZIXJDREREckKkxsiIiKSFSY3REREJCtMboiIiEhWmNwQERGRrDC5ITJTCoUCc+fONXUYGuLj4xEcHIyqVatCoVAgISHB1CGRCfn4+CAyMtJo+5fi7wBJA5MbkrzTp09jwIAB8Pb2hp2dHerUqYPu3bvjq6++MtprrlmzBl988UWR9lu3bmHu3Llm/aV97tw5zJ07F9euXTPofp89e4aBAwfi/v37WLx4MVatWgVvb+9i17927RpGjhwJPz8/2NnZwd3dHZ07d8acOXPK9Prbt2+vtF90x48fh0KhwOzZs4td59KlS1AoFJgyZUoFRkZkGkxuSNIOHDiANm3a4OTJkxgzZgyWLl2K0aNHw8LCAkuWLDHa65aU3Lz//vtmn9y8//77Bk9urly5guvXr+O///0vxo4di1dffRUuLi5a1718+TICAgKwa9cuDBkyBEuXLsX48eNRo0YNfPzxx2V6/e3bt+P9998vzyGYrcDAQDRq1Ai//vprseusWbMGAPDqq69WVFi4cOECvv/++wp7PSIVK1MHQFSSDz/8EM7OzoiPj0e1atU0lqWmppomKCN49OgRqlatauowykX1fhR+n7RZvHgxMjMzkZCQUOTsjpze14o0dOhQvPvuuzh06BDat29fZPmvv/6KRo0aITAwsFyvo89n1dbWtlyvVZHk8DtI+XjmhiTtypUraNq0qdYvTFdX1yJtq1evxnPPPQd7e3u4uLigc+fO2L17t3r55s2b0adPH9SuXRu2trbw8/PD/PnzkZubq14nNDQU27Ztw/Xr16FQKKBQKODj44OYmBi0bdsWADBy5Ej1spUrV6q3PXz4MHr27AlnZ2fY29sjJCQEcXFxGjHOnTsXCoUC586dwyuvvAIXFxd07NgRABAZGQkHBwdcvXoV4eHhqFq1KmrXro158+ZBCFFqf504cQK9evWCk5MTHBwc0LVrVxw6dEi9fOXKlRg4cCAAICwsTH0MMTExJe73r7/+QqdOnVC1alVUq1YNffv2xfnz59XLIyMjERISAgAYOHAgFAoFQkNDi93flStX4OnpqfWylbb3dceOHerXd3R0RJ8+fXD27FmN1//6668BQH1MCoVCvfzRo0eYOnUqvLy8YGtri4YNG+LTTz8t0qd79uxBx44dUa1aNTg4OKBhw4Z4++231cuzs7Px3nvvoXXr1nB2dkbVqlXRqVMnREdHl9h/APD888/D19dX67KgoCC0adNG5zi0GTp0KID8MzQFHTt2DBcuXFCvA5Tep0D+5/HKlSvo3bs3HB0d1fu4dOkS+vfvD3d3d9jZ2cHT0xODBw9Genq6enttY27S0tLw1ltvwcfHB7a2tvD09MTw4cNx9+5d9TqpqakYNWoU3NzcYGdnh5YtW+Knn34q8fhVSvsdAJS/BwqFAvv27cMbb7wBV1dXeHp66rR/Mg88c0OS5u3tjYMHD+LMmTNo1qxZieu+//77mDt3LoKDgzFv3jzY2Njg8OHD+Ouvv9CjRw8Ayj9qDg4OmDJlChwcHPDXX3/hvffew8OHD/HJJ58AAN555x2kp6fjxo0bWLx4MQDAwcEBjRs3xrx58/Dee+9h7Nix6NSpEwAgODgYgDIB6NWrF1q3bo05c+bAwsICK1asQJcuXRAbG4vnnntOI96BAwfC398fCxYs0PiSzc3NRc+ePdG+fXssWrQIO3fuxJw5c5CTk4N58+YVe/xnz55Fp06d4OTkhOnTp8Pa2hrLly9HaGgo9u3bh3bt2qFz586YOHEivvzyS7z99tto3LgxAKh/arN371706tULvr6+mDt3Lp48eYKvvvoKHTp0wPHjx+Hj44Nx48ahTp06WLBgASZOnIi2bdvCzc2t2H16e3tj7969+Ouvv9ClS5di1wOAVatWYcSIEQgPD8fHH3+Mx48f45tvvkHHjh1x4sQJ9evfunULe/bswapVqzS2F0LgxRdfRHR0NEaNGoVWrVph165dmDZtGm7evKl+j8+ePYvnn38eLVq0wLx582Bra4vLly9rJKcPHz7EDz/8gCFDhmDMmDHIyMjA//73P4SHh+PIkSNo1apVsccxaNAgDB8+HPHx8eokGQCuX7+OQ4cOqT9/usShTb169RAcHIzff/8dixcvhqWlpXqZKuF55ZVXdO5TlZycHISHh6Njx4749NNPYW9vj+zsbISHhyMrKwtvvvkm3N3dcfPmTWzduhVpaWlwdnbWGmNmZiY6deqE8+fP47XXXkNgYCDu3r2LLVu24MaNG6hZsyaePHmC0NBQXL58GRMmTEC9evWwbt06REZGIi0tDZMmTSq2D3T5HSjojTfeQK1atfDee+/h0aNHJfYvmRlBJGG7d+8WlpaWwtLSUgQFBYnp06eLXbt2iezsbI31Ll26JCwsLMRLL70kcnNzNZbl5eWp//348eMirzFu3Dhhb28vnj59qm7r06eP8Pb2LrJufHy8ACBWrFhR5DX8/f1FeHh4kderV6+e6N69u7ptzpw5AoAYMmRIkf2PGDFCABBvvvmmxr779OkjbGxsxL///qtuByDmzJmjfh4RESFsbGzElStX1G23bt0Sjo6OonPnzuq2devWCQAiOjq6yOtr06pVK+Hq6iru3bunbjt58qSwsLAQw4cPV7dFR0cLAGLdunWl7vPMmTOiSpUqAoBo1aqVmDRpkti0aZN49OiRxnoZGRmiWrVqYsyYMRrtKSkpwtnZWaN9/PjxQtuftE2bNgkA4oMPPtBoHzBggFAoFOLy5ctCCCEWL14sAGj0cWE5OTkiKytLo+3BgwfCzc1NvPbaayUec3p6urC1tRVTp07VaF+0aJFQKBTi+vXrOsdRnK+//loAELt27VK35ebmijp16oigoCAhhH59qvo8zpw5U2PdEydO6PRee3t7ixEjRqifv/feewKAiIqKKrKu6vfmiy++EADE6tWr1cuys7NFUFCQcHBwEA8fPlS3l/V3YMWKFQKA6Nixo8jJySnxGMg88bIUSVr37t1x8OBBvPjiizh58iQWLVqE8PBw1KlTB1u2bFGvt2nTJuTl5eG9996DhYXmx7rg5YkqVaqo/52RkYG7d++iU6dOePz4Mf75558yx5mQkIBLly7hlVdewb1793D37l3cvXsXjx49QteuXfH3338jLy9PY5v//Oc/xe5vwoQJGvFPmDAB2dnZ2Lt3r9b1c3NzsXv3bkRERGhc+vDw8MArr7yC/fv34+HDh3of1+3bt5GQkIDIyEhUr15d3d6iRQt0794d27dv13ufANC0aVMkJCTg1VdfxbVr17BkyRJERETAzc1NYwDqnj17kJaWhiFDhqj79O7du7C0tES7du10uhy0fft2WFpaYuLEiRrtU6dOhRACO3bsAJA/Vmjz5s1F3isVS0tL2NjYAADy8vJw//595OTkoE2bNjh+/HiJcTg5OaFXr174/fffNc7UrV27Fu3bt0fdunV1jqM4gwYNgrW1tcalqX379uHmzZvqy0ll6dPXX39d47nqzMyuXbvw+PFjnePbsGEDWrZsiZdeeqnIMtXv6fbt2+Hu7o4hQ4aol1lbW2PixInIzMzEvn37tO67LL8DY8aM0TjDRfLB5IYkr23btoiKisKDBw9w5MgRzJo1CxkZGRgwYADOnTsHQDmGw8LCAk2aNClxX2fPnsVLL70EZ2dnODk5oVatWuq7RwqOFdDXpUuXAAAjRoxArVq1NB4//PADsrKyiuy/Xr16WvdlYWFRZGxGgwYNAKDYO5z+/fdfPH78GA0bNiyyrHHjxsjLy0NycrK+h4Xr168DQLH7VSVwZdGgQQOsWrUKd+/exalTp7BgwQJYWVlh7Nix6iRO1a9dunQp0q+7d+/WafDx9evXUbt2bTg6OhaJv+AxDho0CB06dMDo0aPh5uaGwYMH4/fffy+SYPz0009o0aIF7OzsUKNGDdSqVQvbtm3T6fMzaNAgJCcn4+DBgwCUn9tjx45h0KBBGuvoEoc2NWrUQHh4ODZu3IinT58CUF6SsrKywssvvwxA/z61srIqMh6lXr16mDJlCn744QfUrFkT4eHh+Prrr0vtgytXrpR6efn69evw9/cv8p+Uwu9XYWX5HSjud5DMH8fckNmwsbFB27Zt0bZtWzRo0AAjR47EunXrdJ4XJS0tDSEhIXBycsK8efPU86scP34cM2bM0Pt/yQWptv3kk0+KHXfh4OCg8bzgWaTKzNLSEs2bN0fz5s0RFBSEsLAw/PLLL+jWrZu6X1etWgV3d/ci21pZGe5PWJUqVfD3338jOjoa27Ztw86dO7F27Vp06dIFu3fvhqWlJVavXo3IyEhERERg2rRpcHV1haWlJRYuXIgrV66U+hovvPAC7O3t8fvvv6vHx1hYWKgHeesaR0leffVVbN26FVu3bsWLL76IDRs2oEePHqhVqxYA6N2ntra2RRINAPjss88QGRmJzZs3Y/fu3Zg4cSIWLlyIQ4cOmc3gXP4OyheTGzJLqjtLbt++DQDw8/NDXl4ezp07V2xyERMTg3v37iEqKgqdO3dWtycmJhZZt+ClLF3a/fz8ACgvPXTr1k3n49AmLy8PV69eVZ+tAYCLFy8CgMZAz4Jq1aoFe3t7XLhwociyf/75BxYWFvDy8gJQ/DFoo7qbqbj91qxZ06C3z2p7XwHlHVSl9Wtxx6UavJyRkaFx9kZ1GbLgHVsWFhbo2rUrunbtis8//xwLFizAO++8g+joaHTr1g3r16+Hr68voqKiNF5P1wS7atWqeP7557Fu3Tp8/vnnWLt2LTp16oTatWtrrFdaHCV58cUX4ejoiDVr1sDa2hoPHjzQuEtKnz4tjSopnT17Ng4cOIAOHTrg22+/xQcffKB1fT8/P5w5c6bEfXp7e+PUqVPIy8vTSKq0vV8F6fM7QPLHy1IkadHR0VpvgVaN9VCdgo6IiICFhQXmzZtX5AyManvV/3gL7i87OxvLli0rsv+qVatqPcWu+iJPS0vTaG/dujX8/Pzw6aefIjMzs8h2//77b7HHqM3SpUs14l+6dCmsra3RtWtXretbWlqiR48e2Lx5s8alqzt37mDNmjXo2LEjnJycSjwGbTw8PNCqVSv89NNPGuufOXMGu3fvRu/evfU6LpXY2Fg8e/asSHvh9zU8PBxOTk5YsGCB1vUL9mtxx9W7d2/k5uZq9CmgnGtHoVCgV69eAID79+8X2b8qUc7KygKg/TN0+PBh9WUmXQwaNAi3bt3CDz/8gJMnT2pcktI1jpJUqVIFL730ErZv345vvvkGVatWRd++fdXL9enT4jx8+BA5OTkabc2bN4eFhUWJMfbv3x8nT57Exo0biyxT9Wnv3r2RkpKCtWvXqpfl5OTgq6++goODg3rKgcL0+R0g+eOZG5K0N998E48fP8ZLL72ERo0aITs7GwcOHMDatWvh4+ODkSNHAgDq16+Pd955B/Pnz0enTp3Qr18/2NraIj4+HrVr18bChQsRHBwMFxcXjBgxAhMnToRCocCqVau0Jk+tW7fG2rVrMWXKFLRt2xYODg544YUX4Ofnh2rVquHbb7+Fo6Mjqlatinbt2qFevXr44Ycf0KtXLzRt2hQjR45EnTp1cPPmTURHR8PJyQl//PGHTsdsZ2eHnTt3YsSIEWjXrh127NiBbdu24e2331ZfWtDmgw8+UM+P8sYbb8DKygrLly9HVlYWFi1apF6vVatWsLS0xMcff4z09HTY2tqiS5cuWueXAZSX2nr16oWgoCCMGjVKfSu4s7NzmcsdfPzxxzh27Bj69euHFi1aAFCWEPj5559RvXp1TJ48GYDyTNg333yDYcOGITAwEIMHD0atWrWQlJSEbdu2oUOHDuqkpXXr1gCAiRMnIjw8HJaWlhg8eDBeeOEFhIWF4Z133sG1a9fQsmVL7N69G5s3b8bkyZPVZzLmzZuHv//+G3369IG3tzdSU1OxbNkyeHp6quchev755xEVFYWXXnoJffr0QWJiIr799ls0adJEa1KrjWq+mP/+97+wtLRE//79NZbrEkdpXn31Vfz888/YtWsXhg4dqnF2TZ8+Lc5ff/2FCRMmYODAgWjQoAFycnKwatUqrcdT0LRp07B+/XoMHDgQr732Glq3bo379+9jy5Yt+Pbbb9GyZUuMHTsWy5cvR2RkJI4dOwYfHx+sX78ecXFx+OKLL4qMnSpI198BqgRMdp8WkQ527NghXnvtNdGoUSPh4OAgbGxsRP369cWbb74p7ty5U2T9H3/8UQQEBAhbW1vh4uIiQkJCxJ49e9TL4+LiRPv27UWVKlVE7dq11beWo9Ct0ZmZmeKVV14R1apVEwA0bgvfvHmzaNKkibCysipyW/iJEydEv379RI0aNYStra3w9vYWL7/8svjzzz/V66huBdd2q++IESNE1apVxZUrV0SPHj2Evb29cHNzE3PmzClyizsK3QYrhBDHjx8X4eHhwsHBQdjb24uwsDBx4MCBIq/z/fffC19fX2FpaanTbeF79+4VHTp0EFWqVBFOTk7ihRdeEOfOndNYR59bwePi4sT48eNFs2bNhLOzs7C2thZ169YVkZGRGrfxFtx3eHi4cHZ2FnZ2dsLPz09ERkaKo0ePqtfJyckRb775pqhVq5ZQKBQat4VnZGSIt956S9SuXVtYW1sLf39/8cknn2jctv/nn3+Kvn37itq1awsbGxtRu3ZtMWTIEHHx4kX1Onl5eWLBggXC29tb2NraioCAALF161YxYsQIrVMHFGfo0KECgOjWrVuRZbrEUZqcnBzh4eEhAIjt27drXUeXPlV9Hgu7evWqeO2114Sfn5+ws7MT1atXF2FhYWLv3r0a6xW+FVwIIe7duycmTJgg6tSpI2xsbISnp6cYMWKEuHv3rnqdO3fuiJEjR4qaNWsKGxsb0bx58yLTLwhR9t8B1a3g8fHxWvuGzJ9CCB2mPSWiChEZGYn169frfBaAiIiK4pgbIiIikhUmN0RERCQrTG6IiIhIVjjmhoiIiGSFZ26IiIhIVpjcEBERkaxIZhK/jz76CLNmzcKkSZPwxRdfaF1n5cqV6knbVGxtbdUF4nSRl5eHW7duwdHRUa9p6ImIiMh0hBDIyMhA7dq1tdY7K0gSyU18fDyWL1+unqm0JE5OThq1Q/RNUG7dusX6IkRERGYqOTm51OKsJk9uMjMzMXToUHz//ffFFlsrSKFQaK1kqyvV1N3JycmsM0JERGQmHj58CC8vrxJLcKiYPLkZP348+vTpg27duumU3GRmZsLb2xt5eXkIDAzEggUL0LRp02LXz8rK0ijklpGRAUB5BojJDRERkXnR5YqNSQcU//bbbzh+/DgWLlyo0/oNGzbEjz/+iM2bN2P16tXIy8tDcHAwbty4Uew2CxcuhLOzs/rBS1JERETyZrJ5bpKTk9GmTRvs2bNHPdYmNDQUrVq1KnZAcWHPnj1D48aNMWTIEMyfP1/rOoXP3KhOa6Wnp/PMDRERkZl4+PAhnJ2ddfr+NtllqWPHjiE1NRWBgYHqttzcXPz9999YunQpsrKyYGlpWeI+rK2tERAQgMuXLxe7jq2tLWxtbQ0WNxEREUmbyZKbrl274vTp0xptI0eORKNGjTBjxoxSExtAmQydPn0avXv3NlaYRESSlpubi2fPnpk6DKJys7a21um7XxcmS24cHR3RrFkzjbaqVauiRo0a6vbhw4ejTp066jE58+bNQ/v27VG/fn2kpaXhk08+wfXr1zF69OgKj5+IyJSEEEhJSUFaWpqpQyEymGrVqsHd3b3c89CZ/G6pkiQlJWlM1PPgwQOMGTMGKSkpcHFxQevWrXHgwAE0adLEhFESEVU8VWLj6uoKe3t7TkpKZk0IgcePHyM1NRUA4OHhUa79VbrCmfoMSCIikqLc3FxcvHgRrq6uqFGjhqnDITKYe/fuITU1FQ0aNChyiUqf72/WliIiMjOqMTb29vYmjoTIsFSf6fKOI2NyQ0RkpngpiuTGUJ9pSY+5ISIyqNxcIDYWuH0b8PAAOnUCDHR3BhFJB8/cEFHlEBUF+PgAYWHAK68of/r4KNuJymHYsGFYsGCBXttcu3YNCoUCCQkJxgmqnM6dOwdPT088evTI1KGUCZMbIpK/qChgwACgcKmWmzeV7UxwKsy///6L119/HXXr1oWtrS3c3d0RHh6OuLg4nfcxd+5ctGrVynhB6uHkyZPYvn07Jk6cqNF++fJljBw5Ep6enrC1tUW9evUwZMgQHD161ESRanr69CnGjx+PGjVqwMHBAf3798edO3fUy5s0aYL27dvj888/N2GUZcfkhojkLTcXmDQJ0HZjqKpt8mTlepVRbi4QEwP8+qvyp5H7oX///jhx4gR++uknXLx4EVu2bEFoaCju3btn1Nc1lq+++goDBw6Eg4ODuu3o0aNo3bo1Ll68iOXLl+PcuXPYuHEjGjVqhKlTp5ow2nxvvfUW/vjjD6xbtw779u3DrVu30K9fP411Ro4ciW+++QY5OTkmirIcRCWTnp4uAIj09HRTh0JEFSE6WghlGlPyIzra1JHq7MmTJ+LcuXPiyZMn5dvRhg1CeHpq9oOnp7LdCB48eCAAiJiYmFLXGzVqlKhZs6ZwdHQUYWFhIiEhQQghxIoVKwQAjceKFSuEEEJcv35dvPjii6Jq1arC0dFRDBw4UKSkpKj3m5CQIEJDQ4WDg4NwdHQUgYGBIj4+XgghxN27d8XgwYNF7dq1RZUqVUSzZs3EmjVrSowzJydHODs7i61bt6rb8vLyRNOmTUXr1q1Fbm6u1mMTQojExEQBQJw4cUK9r9dee034+PgIOzs70aBBA/HFF19obBsdHS3atm0r7O3thbOzswgODhbXrl0r9dgKS0tLE9bW1mLdunXqtvPnzwsA4uDBg+q2rKwsYWtrK/bu3VtiPxhSSZ9tfb6/eeaGiOTt9m3DricXJrhU5+DgAAcHB2zatEmjoHFhAwcORGpqKnbs2IFjx44hMDAQXbt2xf379zFo0CBMnToVTZs2xe3bt3H79m0MGjQIeXl56Nu3L+7fv499+/Zhz549uHr1KgYNGqTe79ChQ+Hp6Yn4+HgcO3YMM2fOhLW1NQDlZZrWrVtj27ZtOHPmDMaOHYthw4bhyJEjxcZ56tQppKeno02bNuq2hIQEnD17FlOnTtWYhFalWrVqWveVl5cHT09PrFu3DufOncN7772Ht99+G7///jsAICcnBxEREQgJCcGpU6dw8OBBjB07Vn13UUnHVtixY8fw7NkzdOvWTd3WqFEj1K1bFwcPHlS32djYoFWrVoiNjS22DyTLGJmXlPHMDVElwzM3ReXkFD1jU/ChUAjh5aVcz8DWr18vXFxchJ2dnQgODhazZs0SJ0+eVC+PjY0VTk5O4unTpxrb+fn5ieXLlwshhJgzZ45o2bKlxvLdu3cLS0tLkZSUpG47e/asACCOHDkihBDC0dFRrFy5UudY+/TpI6ZOnVrs8o0bNwpLS0uRl5enblu7dq0AII4fP17ivgufudFm/Pjxon///kIIIe7du1fiWS99ju2XX34RNjY2Rdrbtm0rpk+frtH20ksvicjISJ32awg8c0NEpItOnQBPT6C4+TMUCsDLS7leZREbW/SMTUFCAMnJyvUMrH///rh16xa2bNmCnj17IiYmBoGBgVi5ciUA5QDdzMxM9UBX1SMxMRFXrlwpdr/nz5+Hl5cXvLy81G1NmjRBtWrVcP78eQDAlClTMHr0aHTr1g0fffSRxv5yc3Mxf/58NG/eHNWrV4eDgwN27dqFpKSkYl/zyZMnsLW11ZibRZRj0v+vv/4arVu3Rq1ateDg4IDvvvtO/frVq1dHZGQkwsPD8cILL2DJkiW4XeBsY0nHVh5VqlTB48ePDbKvisTkhojkzdISWLJE+e/CCY7q+RdfVK75bkx8qc7Ozg7du3fHu+++iwMHDiAyMhJz5swBAGRmZsLDwwMJCQkajwsXLmDatGnlet25c+fi7Nmz6NOnD/766y80adIEGzduBAB88sknWLJkCWbMmIHo6GgkJCQgPDwc2dnZxe6vZs2aePz4scY6DRo0AAD8888/esX222+/4b///S9GjRqF3bt3IyEhASNHjtTY94oVK3Dw4EEEBwdj7dq1aNCgAQ4dOlTqsRXm7u6O7OzsIkVX79y5A3d3d422+/fvo1atWnodixQwuSEi+evXD1i/HqhTR7Pd01PZXuguEdnTtShhOYsX6qpJkybq+VQCAwORkpICKysr1K9fX+NRs2ZNAMqxILmF7upq3LgxkpOTkZycrG47d+4c0tLSNIorN2jQAG+99RZ2796Nfv36YcWKFQCAuLg49O3bF6+++ipatmwJX19fXLx4scS4Vbejnzt3TqOtSZMm+Oyzz5CXl1dkm+KquMfFxSE4OBhvvPEGAgICUL9+fa1nXwICAjBr1iwcOHAAzZo1w5o1a0o9tsJat24Na2tr/Pnnn+q2CxcuICkpCUFBQRrrnjlzBgEBAcX2gVQxuSGiyqFfP+DaNSA6GlizRvkzMbHyJTaAyS7V3bt3D126dMHq1atx6tQpJCYmYt26dVi0aBH69u0LAOjWrRuCgoIQERGB3bt349q1azhw4ADeeecd9RwxPj4+SExMREJCAu7evYusrCx069YNzZs3x9ChQ3H8+HEcOXIEw4cPR0hICNq0aYMnT55gwoQJiImJwfXr1xEXF4f4+Hg0btwYAODv7489e/bgwIEDOH/+PMaNG6cx74s2tWrVQmBgIPbv31+g6xRYsWIFLl68iE6dOmH79u24evUqTp06hQ8//FB9nIX5+/vj6NGj2LVrFy5evIh3330X8fHx6uWJiYmYNWsWDh48iOvXr2P37t24dOkSGjduXOqxFebs7IxRo0ZhypQpiI6OxrFjxzBy5EgEBQWhffv26vWuXbuGmzdvagw8NhtGGA8kaRxQTETmziC3gm/YoBw4rFAUHUysUBjldvCnT5+KmTNnisDAQOHs7Czs7e1Fw4YNxezZs8Xjx4/V6z18+FC8+eabonbt2sLa2lp4eXmJoUOHqgcLP336VPTv319Uq1ZN51vBs7KyxODBg4WXl5ewsbERtWvXFhMmTFD34b1790Tfvn2Fg4ODcHV1FbNnzxbDhw8Xffv2LfGYli1bJtq3b1+k/cKFC2L48OGidu3awsbGRnh7e4shQ4aoBxoXHlD89OlTERkZKZydnUW1atXE66+/LmbOnKkeOJ2SkiIiIiKEh4eHen/vvfeeyM3NLfXYtHny5Il44403hIuLi7C3txcvvfSSuH37tsY6CxYsEOHh4SUev6EZakCxQohyjH4yQ/qUTCcikqKnT58iMTER9erVg52dXdl3FBWlnOCw4OBiLy/lGKTKeEarDJ48eYKGDRti7dq1RS7pmLPs7Gz4+/tjzZo16NChQ4W9bkmfbX2+v1k4k4iosurXD+jbl8VEy6FKlSr4+eefcffuXVOHYlBJSUl4++23KzSxMSQmN0RElZmlJRAaauoozFqoDPtPNYjbXHFAMREREckKkxsiIiKSFSY3REREJCtMboiIiEhWmNwQERGRrDC5ISIiIllhckNERESywuSGiIhkT6FQYNOmTZLdX2GdO3fWKIqpi5iYGCgUimKLc5rauXPn4OnpqS6SakxMboiIqEK88MIL6Nmzp9ZlsbGxUCgUOHXqlFFe+/bt2+jVq5dR9m1oW7ZswZ07dzB48GCN9hMnTmDgwIFwc3ODnZ0d/P39MWbMmFKrl1eUDz/8EMHBwbC3t0e1atWKLG/SpAnat2+Pzz//3OixMLkhIqqE0tM1S0oVdOOGcrmhjRo1Cnv27MENLS+8YsUKtGnTBi1atNB7v9nZ2aWu4+7uDltbW733bSwlxfzll19i5MiRsLDI/4reunUr2rdvj6ysLPzyyy84f/48Vq9eDWdnZ7z77rsVEXKpsrOzMXDgQLz++uvFrjNy5Eh88803yMnJMW4whq/pKW2sCk5E5q68VcHT0oRo314IX18h/r/QtlpSkrK9fXvleob07Nkz4ebmJubPn6/RnpGRIRwcHMQ333wjhBAiNjZWdOzYUdjZ2QlPT0/x5ptviszMTPX63t7eYt68eWLYsGHC0dFRjBgxQmRlZYnx48cLd3d3YWtrK+rWrSsWLFig3gaA2Lhxo/p5cnKyGDx4sLoqduvWrcWhQ4fUy5ctWyZ8fX2FtbW1aNCggfj55581Yi68v1OnTomwsDBhZ2cnqlevLsaMGSMyMjLUy0eMGCH69u0rPvjgA+Hh4SF8fHy09lFqaqpQKBTizJkz6rZHjx6JmjVrioiICK3bPHjwQAghRHR0tACgfn737l0xePBgUbt2bVGlShXRrFkzsWbNGo1t161bJ5o1a6aOu2vXruq+jo6OFm3bthX29vbC2dlZBAcHi2vXrmmNoaAVK1YIZ2dnrcuysrKEra2t2Lt3r9blhqoKzjM3RESVTEYGkJoKXL2qLCuVnKxsT05WPr96Vbk8I8Owr2tlZYXhw4dj5cqVEEKo29etW4fc3FwMGTIEV65cQc+ePdG/f3+cOnUKa9euxf79+zFhwgSNfX366ado2bIlTpw4gXfffRdffvkltmzZgt9//x0XLlzAL7/8Ah8fH61xZGZmIiQkBDdv3sSWLVtw8uRJTJ8+HXl5eQCAjRs3YtKkSZg6dSrOnDmDcePGYeTIkYiOjta6v0ePHiE8PBwuLi6Ij4/HunXrsHfv3iIx//nnn7hw4QL27NmDrVu3at3X/v37YW9vj8aNG6vbdu3ahbt372L69Olat9F2CQhQVthu3bo1tm3bhjNnzmDs2LEYNmwYjhw5AkB5qW7IkCF47bXXcP78ecTExKBfv34QQiAnJwcREREICQnBqVOncPDgQYwdOxYKhULra+nKxsYGrVq1QmxsbLn2U6pS0x+Z4ZkbIjJ35T1zI0T+GRpA+TMuTvN54TM6hnL+/HkBQERHR6vbOnXqJF599VUhhBCjRo0SY8eO1dgmNjZWWFhYqI/X29u7yFmMN998U3Tp0kXk5eVpfV0UONOyfPly4ejoKO7du6d13eDgYDFmzBiNtoEDB4revXtr3d93330nXFxcNM4ubdu2TVhYWIiUlBQhhPLMjZubm8jKytL6miqLFy8Wvr6+Gm0ff/yxACDu379f4raFz9xo06dPHzF16lQhhBDHjh0TALSejbl3754AIGJiYkp8TW1KOnMjhBAvvfSSiIyM1LqMZ26IyHzk5gIxMcCvvyp/5uaaOqJKz8tL+Vb4+irP1HTooPzp66ts9/Iyzus2atQIwcHB+PHHHwEAly9fRmxsLEaNGgUAOHnyJFauXAkHBwf1Izw8HHl5eUhMTFTvp02bNhr7jYyMREJCAho2bIiJEydi9+7dxcaQkJCAgIAAVK9eXevy8+fPo0OHDhptHTp0wPnz54tdv2XLlqhatarG+nl5ebhw4YK6rXnz5rCxsSk2LgB48uQJ7OzsNNpEgbNc+sjNzcX8+fPRvHlzVK9eHQ4ODti1axeSkpIAAC1btkTXrl3RvHlzDBw4EN9//z0ePHgAAKhevToiIyMRHh6OF154AUuWLMHt27fLFEdhVapUwePHjw2yr+IwuSEi44qKAnx8gLAw4JVXlD99fJTtZFJeXsCqVZptq1YZL7FRGTVqFDZs2ICMjAysWLECfn5+CAkJAaC8ZDRu3DgkJCSoHydPnsSlS5fg5+en3kfBRAIAAgMDkZiYiPnz5+PJkyd4+eWXMWDAAK2vX6VKFeMdXAkKx6xNzZo11QmGSoMGDQAA//zzj16v98knn2DJkiWYMWMGoqOjkZCQgPDwcPVgZktLS+zZswc7duxAkyZN8NVXX6Fhw4bqJHLFihU4ePAggoODsXbtWjRo0ACHDh3SKwZt7t+/j1q1apV7PyVhckNExhMVBQwYUPS2nJs3le1McEwqORkYNkyzbdiw/DE4xvLyyy/DwsICa9aswc8//4zXXntNPZYjMDAQ586dQ/369Ys8Sjvr4eTkhEGDBuH777/H2rVrsWHDBty/f7/Iei1atEBCQoLWZQDQuHFjxMXFabTFxcWhSZMmxa5/8uRJjflb4uLiYGFhgYYNG5YYc2EBAQFISUnRSHB69OiBmjVrYtGiRVq3KW5em7i4OPTt2xevvvoqWrZsCV9f3yK3jSsUCnTo0AHvv/8+Tpw4ARsbG2zcuFEjnlmzZuHAgQNo1qyZ3nPvaHPmzBkEBASUez8lYXJDRMaRmwtMmgRoO6Wuaps8mZeoTKTg4GFfXyAuLv8SVcFBxsbg4OCAQYMGYdasWbh9+zYiIyPVy2bMmIEDBw5gwoQJSEhIwKVLl7B58+Yig3ML+/zzz/Hrr7/in3/+wcWLF7Fu3Tq4u7trHWw7ZMgQuLu7IyIiAnFxcbh69So2bNiAgwcPAgCmTZuGlStX4ptvvsGlS5fw+eefIyoqCv/973+1vvbQoUNhZ2eHESNG4MyZM4iOjsabb76JYcOGwc3NTa++CQgIQM2aNTWSq6pVq+KHH37Atm3b8OKLL2Lv3r24du0ajh49iunTp+M///mP1n35+/tjz549OHDgAM6fP49x48bhzp076uWHDx/GggULcPToUSQlJSEqKgr//vsvGjdujMTERMyaNQsHDx7E9evXsXv3bly6dEljoHNhSUlJSEhIQFJSEnJzc9Vn3jIzM9XrXLt2DTdv3kS3bt306he96TpASC44oJiogkRHK0enlvYoMLCUdFPeAcXJydoHDxceZJycbMCgCzlw4IAAoDFIV+XIkSOie/fuwsHBQVStWlW0aNFCfPjhh+rl3t7eYvHixRrbfPfdd6JVq1aiatWqwsnJSXTt2lUcP35cvRyFbt2+du2a6N+/v3BychL29vaiTZs24vDhw+rlxroVXBfTp08XgwcPLtIeHx8v+vXrJ2rVqiVsbW1F/fr1xdixY8WlS5eEEEUHFN+7d0/07dtXODg4CFdXVzF79mwxfPhwdRznzp0T4eHh6v01aNBAfPXVV0IIIVJSUkRERITw8PAQNjY2wtvbW7z33nsiNze32LhHjBghABR5FBw8vmDBAhEeHl7sPgw1oFghRBlHKpmphw8fwtnZGenp6XBycjJ1OETy9euvyjE2pVmzBhgyxPjxyMjTp0+RmJiIevXqFRl8qov0dKBnT+Xt3oUHD6vO6Li6Ajt3As7OBgubdJSSkoKmTZvi+PHj8Pb2NnU4BpOdnQ1/f3+sWbOmyIBtlZI+2/p8f1sZLGoiooI8PAy7HhmMs7MyccnIADw9NZd5eQH79gGOjkxsTMXd3R3/+9//kJSUJKvkJikpCW+//XaxiY0hMbkhIuPo1En5zXnzpvZxNwqFcnmnThUfG8HZufjkpXDCQxUvIiLC1CEYnGpgeEXggGIiMg5LS2DJEuW/C89qqnr+xRfK9YiIDIjJDREZT79+wPr1QJ06mu2ensr2fv1MExcRyRovSxGRcfXrB/TtC8TGArdvK8fYdOrEMzYGUMnuB6FKwFCfaSY3RGR8lpbKW3DIIKytrQEAjx8/Ntlsu0TGoCrLoPqMlxWTGyIiM2NpaYlq1aohNTUVAGBvb1/uas1EpiSEwOPHj5Gamopq1arBspxndpncEBGZIXd3dwBQJzhEclCtWjX1Z7s8mNwQSVluLseqkFYKhQIeHh5wdXXFs2fPTB0OUblZW1uX+4yNCpMbIqmKilLWZipYdNLTU3l7Ne8yov9naWlpsC8EIrngreBEUsRq2kREZcbkhkhqWE2biKhcmNwQSU1sbNEzNgUJoaxuGBtbcTEREZkRJjdEUnP7tmHXIyKqZJjcEEkNq2kTEZULkxsiqVFV0y5uUjaFAvDyYjVtIqJiMLkhkhpW0yYiKhcmN0RSxGraRERlxkn8iKSK1bSJiMqEyQ2RlLGaNhGR3nhZioiIiGSFyQ0RERHJCi9LERHpilXaicyCZM7cfPTRR1AoFJg8eXKJ661btw6NGjWCnZ0dmjdvju3bt1dMgERUuUVFAT4+QFgY8Moryp8+PixiSiRBkkhu4uPjsXz5crRo0aLE9Q4cOIAhQ4Zg1KhROHHiBCIiIhAREYEzZ85UUKREVCmxSjuRWTF5cpOZmYmhQ4fi+++/h4uLS4nrLlmyBD179sS0adPQuHFjzJ8/H4GBgVi6dGkFRUtElQ6rtBOZHZMnN+PHj0efPn3QrVu3Utc9ePBgkfXCw8Nx8ODBYrfJysrCw4cPNR5ERDpjlXYis2PSAcW//fYbjh8/jvj4eJ3WT0lJgZubm0abm5sbUlJSit1m4cKFeP/998sVJxFVYqzSTmR2THbmJjk5GZMmTcIvv/wCOzs7o73OrFmzkJ6ern4kJycb7bWISIZYpZ3I7JjszM2xY8eQmpqKwMBAdVtubi7+/vtvLF26FFlZWbAsdIulu7s77ty5o9F2584duLu7F/s6tra2sLW1NWzwRFR5qKq037ypfdyNQqFczirtRJJhsjM3Xbt2xenTp5GQkKB+tGnTBkOHDkVCQkKRxAYAgoKC8Oeff2q07dmzB0FBQRUVNhFVNqzSTmR2THbmxtHREc2aNdNoq1q1KmrUqKFuHz58OOrUqYOFCxcCACZNmoSQkBB89tln6NOnD3777TccPXoU3333XYXHT0SViKpK+6RJmoOLPT2ViQ2rtBNJiqRnKE5KSoKFRf7JpeDgYKxZswazZ8/G22+/DX9/f2zatKlIkkREZHCs0k5kNhRCaLuILF8PHz6Es7Mz0tPT4eTkZOpwiIiISAf6fH+bfJ4bIiIiIkNickNERESyIukxN0QkAdnZwLJlwJUrgJ8f8MYbgI2NqaMiIioWkxsiKt706cDnn2vWTfrvf4EpU4BFi0wXFxFRCZjcEJF206cDn3xStD03N7+dCQ4RSRDvliKiorKzAXv7kitdW1oCjx/zEhURVQjeLUVE5bNsWcmJDaBcvmxZxcRDRKQHJjdEVNSVK4Zdj4ioAjG5IaKi/PwMux4RUQXimBsiKopjbohIYjjmhojKx8ZGebt3SaZMYWJDRJLEW8GJSDvVbd6F57mxtOQ8N0QkabwsRUQl4wzFRCQB+nx/88wNEZXMxgaYPNnUURAR6YxjboiIiEhWmNwQERGRrPCyFJGxPHkCTJsGXLoE+Psr6zFVqWLqqCq33FwgNha4fRvw8AA6dVIOkCYiWeGZGyJjiIhQzhPz9dfA7t3Kn/b2ynYyjagowMcHCAsDXnlF+dPHR9lORLLC5IbI0CIigM2btS/bvJkJjilERQEDBgA3bmi237ypbGeCQyQrvBWcyJCePFGeoSnN48e8RFVRcnOVZ2gKJzYqCgXg6QkkJvISFZGEcYZiIlOZNs2w61H5xcYWn9gAgBBAcrJyPSKSBSY3RIZ06ZJh16Pyu33bsOsRkeQxuSEyJH9/w65H5efhYdj1iEjyOOaGyJA45kZ6VGNubt5UXoIqjGNuiMwCx9wQmUqVKkDfviWv07cvE5uKZGkJLFmi/LdCoblM9fyLL5jYEMkIkxsiQ9u0qfgEp29f5XKqWP36AevXA3XqaLZ7eirb+/UzTVxEZBS8LEVkLJyhWHo4QzGR2dLn+5vJDREREUkex9wQERFRpcXkhoiIiGSFVcGJjEUq4zvKG4dUjoOISEdMboiMISoKmDRJc9p/T0/lLckVeWdOeeOQynEQEemBl6WIDE0qFajLG4dUjoOISE+8W4rIkKRSgbq8cUjlOIiI/h/vliIyFalUoC5vHFI5DiKiMmByQ2RIUqlAXd44pHIcRERlwOSGyJCkUoG6vHFI5TiIiMqAyQ2RIXXqpByLUrhAo4pCAXh5KdeTchxSOQ4iojJgckNkSFKpQF3eOKRyHEREZcDkhsjQpFKBurxxSOU4iIj0xFvBiYxFKjP7coZiIpIBVgUvAZMbIiIi88N5boiIiKjSYnJDREREssLCmaRJLuMrDHEccukLIqJKhskN5ZNLBWhDHIdc+oKIqBLiZSlSkksFaEMch1z6goioktLrbqm8vDzs27cPsbGxuH79Oh4/foxatWohICAA3bp1g5eXlzFjNQjeLaWFXCpAG+I45NIXREQyY/C7pZ48eYIPPvgAXl5e6N27N3bs2IG0tDRYWlri8uXLmDNnDurVq4fevXvj0KFDBjkIqkByqQBtiOOQS18QEVViOo25adCgAYKCgvD999+je/fusLa2LrLO9evXsWbNGgwePBjvvPMOxowZY/BgyUjkUgHaEMchl74gIqrEdEpudu/ejcaNG5e4jre3N2bNmoX//ve/SEpKMkhwVEHkUgHaEMchl74gIqrEOEMx5Y8zuXlTedmlMHMZZ2KI45BLXxARyYw+399luhX86dOnOHXqFFJTU5GXl6ex7MUXXyzLLsmUVBWgBwxQfnkX/FI3pwrQhjgOufQFEVElpveZm507d2L48OG4e/du0Z0pFMjNzTVYcMbAMzcl0Da3i5eX8svcnOZ2McRxyKUviIhkwqiFM/39/dGjRw+89957cHNzK1egpsDkphRymZWXMxQTEcmKUZMbJycnnDhxAn5+fuUK0lSY3BAREZkfo1YFHzBgAGJiYsoaGxEREZFR6X3m5vHjxxg4cCBq1aqF5s2bF5nzZuLEiQYN0NB45oaIiMj8GPVuqV9//RW7d++GnZ0dYmJioFDdQQLlgGKpJzdEOsvOBpYtA65cAfz8gDfeAGxsKm57QD7jfuRyHERkHoSe3NzcxIcffihyc3P13bSIZcuWiebNmwtHR0fh6Ogo2rdvL7Zv317s+itWrBAANB62trZ6vWZ6eroAINLT08sbPsnZtGlCWFoKobwZXPmwtFS2V8T2QgixYYMQnp6a+/D0VLabE7kcBxGZlD7f33qPucnOzsagQYNgYVH+guKenp746KOPcOzYMRw9ehRdunRB3759cfbs2WK3cXJywu3bt9WP69evlzsOIg3TpwOffKI821BQbq6yffp0424PyKcyuVyOg4jMit5jbt566y3UqlULb7/9tlECql69Oj755BOMGjWqyLKVK1di8uTJSEtLK/P+OeaGSpSdDdjbF01MCrK0BB4/1n6JqbzbA/KpTC6X4yAiSTDqmJvc3FwsWrQIu3btQosWLYoMKP7888/13aV6v+vWrcOjR48QFBRU7HqZmZnw9vZGXl4eAgMDsWDBAjRt2rTY9bOyspCVlaV+/vDhwzLFR5XEsmUlJyaAcvmyZcDkyYbfHtCvMnloaMmvZUpyOQ4iMjt6JzenT59GQEAAAODMmTMaywoOLtZnf0FBQXj69CkcHBywceNGNGnSROu6DRs2xI8//ogWLVogPT0dn376KYKDg3H27Fl4enpq3WbhwoV4//339Y6LKqkrV8q3Xnm3B+RTmVwux0FEZkfv5CY6OtqgATRs2BAJCQlIT0/H+vXrMWLECOzbt09rghMUFKRxVic4OBiNGzfG8uXLMX/+fK37nzVrFqZMmaJ+/vDhQ3h5eRn0GEhGdJ2csrj1yrs9IJ/K5HI5DiIyO3qPuUlPT0dubi6qV6+u0X7//n1YWVmVexxLt27d4Ofnh+XLl+u0/sCBA2FlZYVff/1Vp/U55oZKJKUxN+ZemVwux0FEkmDUGYoHDx6M3377rUj777//jsGDB+u7uyLy8vI0xsiUJDc3F6dPn4YH/+dHhmJjAxQ406fVlCnFJybl3R7Ir0wO5FciVzGnyuRyOQ4iMj/63mfu4uIizp07V6T9/Pnzonr16nrta+bMmWLfvn0iMTFRnDp1SsycOVMoFAqxe/duIYQQw4YNEzNnzlSv//7774tdu3aJK1euiGPHjonBgwcLOzs7cfbsWZ1fk/PckE6kOs+Nl5f5zQ8jl+MgIpPS5/tb7zE3WVlZyMnJKdL+7NkzPHnyRK99paamYvjw4bh9+zacnZ3RokUL7Nq1C927dwcAJCUlacyn8+DBA4wZMwYpKSlwcXFB69atceDAgWIHIBOV2aJFwAcflH2G4fJuDwD9+gF9+5r/zL5yOQ4iMht6j7kJCwtDs2bN8NVXX2m0jx8/HqdOnUJsbKxBAzQ0jrkhIiIyP0ad5+aDDz5At27dcPLkSXTt2hUA8OeffyI+Ph67d+8uW8REREREBqL3gOIOHTrg4MGD8PLywu+//44//vgD9evXx6lTp9CpUydjxEhERESkM70vS5k7XpYqhRSqNxuimrYU4jBEX/L9oALS04GMDOUd9IXduAE4OgLOzhUfF1FF0Ov7W5cRypmZmXqNaNZ3/YrEu6VKIIXqzYa4y0gKcRiiL/l+UAFpaUK0by+Er68QSUmay5KSlO3t2yvXI5Ijfb6/dUpu3N3dxcKFC8WtW7eKXScvL0/s3r1b9OzZUyxYsED3aCsYk5tibNgghEKh+SUGKNsUior5Qp02rejrF3xU1BdqeeMwRF/y/aBCkpOVCQygmeCoEhtVe3KyaeMkMhZ9vr91uix14cIFvP3229i2bRtatmyJNm3aoHbt2rCzs8ODBw9w7tw5HDx4EFZWVpg1axbGjRsHS4ne5snLUlpIoXqzIWb2lUIchuhLvh9UjORkZY3Rq1cBX19g1Spg2LD85zExAKvLkFwZfIbihg0bYsOGDbh48SJefvll3Lx5E+vXr8f333+PmJgY1KlTB99//z2uXbuGN954Q7KJDRVDn+rNxqJPNW1jKm8chuhLvh9UDC8vZQLj66tMaDp0YGJDpI1et4LXrVsXU6dOxdSpU40VD5mCFKo3G6KathTiMERf8v2gEnh5Kc/YdOiQ37ZqFRMbooL0vhWcZEgK1ZsNUU1bCnEYoi/5flAJkpOVl6IKGjZM2U5ESrwVnKRRvVkqYzwMNeamPH3J94OKwTE3VJkZtSo4yZAUqjcbopq2FOIwRF/y/SAtbtzQTGxiYoDgYM0xOKGhJQ/XIqo0jHznluTwVvASSKF6s1TmVTHGPDf69iXfDyqA89xQZWfwW8HlhJelSsEZcQ0XB2coJgPjDMVUmenz/V2m5CYtLQ1HjhxBamoq8vLyNJYNHz5c391VKCY3RERE5seoVcH/+OMPDB06FJmZmXBycoKiwJgAhUIh+eSGiIiI5E3vAcVTp07Fa6+9hszMTKSlpeHBgwfqx/37940RIxEREZHO9D5zc/PmTUycOBH29vbGiIdIOso73kUK42WIJIhjh8jY9D5zEx4ejqNHjxojFiLpiIpSzjUTFga88oryp4+Psr0itieSqfR0oGdPICSk6MSDycnK9p49lesRlZVOZ262bNmi/nefPn0wbdo0nDt3Ds2bN4e1tbXGui+++KJhIySqaFFRwIABRSfQu3lT2b5+PdCvn/G2J5KxjAwgNTV/Xh7VxIMFJyhUrcezN1RWOt0tZWGh2wkehUKB3NKK7ZkY75aiEpW3IrcUKnoTSRxnWqayMPgMxXl5eTo9pJ7YEJWqvBW5pVDRm0jiWN2cjE3vMTc///wzsrKyirRnZ2fj559/NkhQRCZT3orcUqjoTWQGVNXNC2J1czIUvZObkSNHIl3LSK+MjAyMHDnSIEERmUx5K3JLoaI3kRlgdXMyJr2TGyGExsR9Kjdu3IAzR3+RuevUSTkmRstnHICy3ctLuZ4xtieqBAqPuYmL0yz+yQSHykvneW4CAgKgUCigUCjQtWtXWFnlb5qbm4vExET07NnTKEESVRhVRe4BA5SJSMHx9rpU5C7v9kQyp626uWoMjqo9NBTYt0/7PDhEutA5uYmIiAAAJCQkIDw8HA4ODuplNjY28PHxQf/+/Q0eIFGF69dPebv2pEmag4M9PZWJSWm3cZd3eyIZc3QEXF2V/y44eLhgguPqqlyPqKz0Lpz5008/YdCgQbCzszNWTEbFW8FJZ5yhmMgoOEMxlYXRq4KbMyY3RERE5sfgVcFdXFy0DiLWhsUziYiIyJR0Sm6++OIL9b/v3buHDz74AOHh4QgKCgIAHDx4ELt27cK7775rlCCJiIiIdKX3Zan+/fsjLCwMEyZM0GhfunQp9u7di02bNhkyPoOT7GUpqYzPKG8c2dnAsmXAlSuAnx/wxhuAjY3x4jUmqbwnJAscZ2I47EvpqYj3RK/vb6GnqlWrikuXLhVpv3Tpkqhataq+u6tw6enpAoBIT083dSj5NmwQwtNTCOWNw8qHp6ey3ZzimDZNCEtLze0tLZXt5kYq7wnJQlqaEO3bC+HrK0RSkuaypCRle/v2yvWoZOxL6amo90Sf72+9J/GrUaMGNm/eXKR98+bNqFGjhr67I1UF6cL1iFQVpKOizCOO6dOBTz5Rnu0oKDdX2T59umHjNSapvCckG4UrYasmqSs4mV1qqnI9Khn7Unok+Z7omzmtWLFCWFpaiueff17Mnz9fzJ8/Xzz//PPCyspKrFixoizJWIWS1JmbnJyiZwcKPhQKIby8lOtJOY6srKJnbAo/LC2V60mdVN4Tkh3V/2AB5c+4OM3nhf/HS8VjX0pPRbwnRj1zExkZibi4ODg5OSEqKgpRUVFwcnLC/v37ERkZafDkS9akUkG6vHEsW1b0jE1hubnK9aROKu8JyQ4rYRsO+1J6pPae6DxDcUHt2rXDL7/8YuhYKh+pVJAubxxXrui2va7rmZJU3hOSJVUl7A4d8ttYCbts2JfSI6X3RKczNw8fPtT4d0kP0oNUKkiXNw4/P92213U9U5LKe0KyxErYhsO+lB4pvSc6JTcuLi5ITU0FAFSrVg0uLi5FHqp20oNUKkiXN4433ij9FmlLS+V6UieV94Rkh5WwDYd9KT1Se090uiz1119/oXr16up/6zpbMZVCKhWkyxuHjQ0wZYryrqjiTJliHvPdSOU9IVlhJWzDYV9KjyTfE11HKV+9erVco5ylQlJ3S6lom1PFy0sa89zoE4fc57kxxXtCssC5WQyHfSk9UpznRucZii0sLODt7Y2wsDB06dIFoaGh8DTDtJgzFBs5Ds5QTKQVZ9U1HPal9EhthmKdk5uYmBj14/Dhw8jOzoavry+6dOmCsLAwhIWFwc3NrXyRVwDJJjdERERULKMkNwU9ffoUBw4cUCc7R44cwbNnz9CoUSOcPXu2zIFXBCY3RERE5sfoyY1KdnY24uLisGPHDixfvhyZmZnILW0yNxNjckNERGR+9Pn+1msSv+zsbBw6dAjR0dHqy1NeXl7o3Lkzli5dipCQkHIFThIghXEmhohBTmN/iEi2kpKAO3eAtm2LLouPB9zcgLp1jRuDLMcw6TpKOSwsTNjb24umTZuKN954Q/z666/i1q1bZRrxbEqSvFtKKqRQCdsQMcjpri0ikq3r14VwcBDCykqIQ4c0lx06pGx3cFCuZyzmdPeZUWpLxcbGokaNGujSpQu6du2K7t27w4OztMqHFCphGyIGOVUnJyJZu3MHePoUyMkBOnYEDh9Wth8+rHyek6NcfueO8WKQZEVvA9B5zM2jR48QGxuLmJgYREdHIyEhAQ0aNEBISAhCQ0MREhKCWrVqGTvecuOYGy1ycwEfn+ILRioUyvOViYnGu0RliBiyswF7+5KLeFpaAo8f8xIVEUlCwUTGygpYuhSYMCH/+f79QLt2xo2h8OzCq1YpyyZIrRhphQwozsjIwP79+9Xjb06ePAl/f3+cOXOmTEFXFCY3WsTEAGFhpa8XHa38DZBqDF98Abz1Vun7WLwYmDxZ99iIiIyoYIKjUlGJjUrBBEdFSokNoN/3t86XpQqrWrUqqlevjurVq8PFxQVWVlY4f/58WXdHpiSFStiGiEFO1cmJqNJo1055xqagpUsrLrEB8it6F2TOVdZ1vlsqLy8PR48eVV+WiouLw6NHj1CnTh2EhYXh66+/Rpgu//Mm6ZFCJWxDxCCn6uREVGkcPqy8FFXQhAlAq1YVe+ZGW0VvKZ250YfOl6WcnJzw6NEjuLu7q2ckDg0NhZ+ZfVHwspQWqvEuN29qFopUqcgxN+WJgWNuiMjMcMyN7oxyWeqTTz7B+fPncfPmTaxevRqjRo0yu8SGiqGqhA3kV75WqahK2IaIQVWdvCTmUp2ciGQvPl4zsdm/Hxg3TvnTyir/Lqr4eOPFoK2id3Cw8qevb/5dVMXd6yFVOic348aNQ4MGDYwZC5lSv37A+vVAnTqa7Z6eyvZ+/cwjhkWLgGnTiiZBlpbK9kWLDBcvEVE5uLkBdnZFz9C0a5ef4NjZKdczFkdHwNW16BkaL6/8BMfVVbmeOSlX+QVzxMtSpeAMxUREFYYzFOuuwmpLmSMmN0REROanQm4FJyIiIpIiJjdEREQkKzrNc7Nlyxadd/jiiy+WORizVt5xIlIY6yIVhhgvY4j+rOTviVSuwxtiTIIUjoUxyI8h+pPviZHoUolToVDo9LCwsNCrwueyZctE8+bNhaOjo3B0dBTt27cX27dvL3Gb33//XTRs2FDY2tqKZs2aiW3btun1mkapCl7eStZSqMYtFYao6G2I/qzk74lUKgUbomqyFI6FMciPIfqT74l+9Pn+1im5MZYtW7aIbdu2iYsXL4oLFy6It99+W1hbW4szZ85oXT8uLk5YWlqKRYsWiXPnzonZs2cLa2trcfr0aZ1f0+DJzYYNQigUml+CgLJNoSj9y7C828vJtGlF+6HgQ5cExxD9yfdEJCcr/7ACmn94VX9wVe3JycaN48gRZQIDaCY4qsRG1X7kiLSPhTHIjyH6k++JfswmudHGxcVF/PDDD1qXvfzyy6JPnz4abe3atRPjxo3Tef8GTW5ycor+777wl6GXl3I9Y2wvJ1lZRc/YFH5YWirXK44h+pPviVrhP7Bxcdr/EBtb4UTm22+1JzwlkcKxMAb5MUR/8j3RndGTm8zMTLFt2zbxzTffiCVLlmg8yionJ0f8+uuvwsbGRpw9e1brOl5eXmLx4sUabe+9955o0aJFsft9+vSpSE9PVz+Sk5MNl9xER5f8Zax6REcbZ3s5WbxYt74o9P5rMER/8j3RUPAPr+phij+4BRMc1UPXxEZFCsfCGOTHEP3J90Q3+iQ3OhfOVDlx4gR69+6Nx48f49GjR6hevTru3r0Le3t7uLq6YuLEiXrt7/Tp0wgKCsLTp0/h4OCAjRs3okmTJlrXTUlJgVuhqRrd3NyQkpJS7P4XLlyI999/X6+YdFbeStZSqMYtFYao6G2I/uR7okFVKbhDh/w2U1QKVlVN/s9/8tv0rZoshWNhDPJjiP7ke2J4et8K/tZbb+GFF17AgwcPUKVKFRw6dAjXr19H69at8emnn+odQMOGDZGQkIDDhw/j9ddfx4gRI3Du3Dm991OcWbNmIT09Xf1ITk422L7LXclaCtW4pcIQFb0N0Z98TzQUVynYkL9GuiiuavLhw7rvQwrHwhjkxxD9yffECPQ9LeTs7Cz++ecf9b/PnTsnhBDi0KFDomHDhvruroiuXbuKsWPHal1WlstShRllzI22waf6jLkp6/ZyYsgxN+XpT74nalIZC8AxN/KKQU445qZiGXXMTc2aNcXFixeFEEL4+/uLnTt3CiGEOH/+vLC3t9d3d0WEhYWJESNGaF328ssvi+eff16jLSgoyHQDioXIv7Om8JehvndLlXV7OTHk3VLl6U++J5K5i4N3S8krBjnh3VIVz6jJTffu3cUvv/wihBBi9OjR4rnnnhOrV68W4eHh4rnnntNrXzNnzhT79u0TiYmJ4tSpU2LmzJlCoVCI3bt3CyGEGDZsmJg5c6Z6/bi4OGFlZSU+/fRTcf78eTFnzhzT3wouhPY5Uby8yjfPjT7by4mx5rnRtz8r+Xsilfk3OM+NvGKQE85zU/H0+f7Wu3Dm0aNHkZGRgbCwMKSmpmL48OE4cOAA/P398eOPP6Jly5Y672vUqFH4888/cfv2bTg7O6NFixaYMWMGunfvDgAIDQ2Fj48PVq5cqd5m3bp1mD17Nq5duwZ/f38sWrQIvXv31vk1jVY4kzMUGw5nKJYEqcycyhmK5RWDnHCG4orFquAlYFVwIiIi86PP97fet4KrpKam4sKFCwCARo0aoVatWmXdFREREZHB6H0reEZGBoYNG4Y6deogJCQEISEhqF27Nl599VWkp6cbI0YiIiIinemd3IwePRqHDx/G1q1bkZaWhrS0NGzduhVHjx7FuHHjjBFj5ZCbC8TEAL/+qvyZm2vqiIgkIT1dOfZAmxs3lMsrYh9SUN7jkEtfSiEGKcVBWug7Wtne3l7ExsYWaf/7778Nciu4sRnlbqnyquQVqImKwztS8pX3OOTSl1KIQUpxVCb6fH/rfeamRo0acNYydNvZ2RkuLi4GSLcqmagoYMCAoun/zZvK9qgo08RFJAEZGUBqKnD1KhAamj9ja3Ky8vnVq8rlGRnG3YcUlPc45NKXUohBSnFQMfTNnJYvXy66desmbt++rW67ffu26NGjh/j222/13V2Fk9SZG1agJioVZ4HNV97jkEtfSiEGKcVRWRh1npuAgABcvnwZWVlZqPv/k0skJSXB1tYW/v7+GuseP37cUDmYwUjqVvCYGCAsrPT1oqOV/xUgqqQK/m9YxddX+Suka3FBQ+xDCsp7HHLpSynEIKU4KgOj3goeERFR1rioMFagJtIJKy/nK+9xyKUvpRCDlOKgQox+HkliJHVZKjq65FpKqkd0tKkjJTKpgqf/VQ99T/sbYh9SUN7jkEtfSiEGKcVRGRh1QDEApKWl4YcffsCsWbNw//59AMpLUDdv3jRg2lUJdOqknHNbodC+XKFQpv+dOlVsXEQSUvC0v68vEBen/Fl4IKex9yEF5T0OufSlFGKQUhykhb6Z08mTJ0WtWrVE/fr1hZWVlbhy5YoQQoh33nlHDBs2TP9UrIJJ6syNEKxATVQCVl7OV97jkEtfSiEGKcVRmRj1zM2UKVMQGRmJS5cuwc7OTt3eu3dv/P333wZMuyqJfv2A9euBOnU02z09le39+pkmLiIJcHQEXF2LDtD08lI+9/VVLnd0NO4+pKC8xyGXvpRCDFKKg7TT+24pZ2dnHD9+HH5+fnB0dMTJkyfh6+uL69evo2HDhnj69KmxYjUISd0tVVAlr0BNVBxWXs5X3uOQS19KIQYpxVFZGPVuKVtbWzx8+LBI+8WLF1k8szwsLXm7N5EWzs7Ff0Fo+1Ix1j6koLzHIZe+lEIMUoqDitL7stSLL76IefPm4dmzZwAAhUKBpKQkzJgxA/379zd4gERERET60Du5+eyzz5CZmQlXV1c8efIEISEhqF+/PhwdHfHhhx8aI0YiIiIinel9WcrZ2Rl79uxBXFwcTp48iczMTAQGBqJbt27GiI+IqNySkoA7d4C2bYsui48H3NyA/59wXdbYD/nkMl5GLsdhaHoPKDZ3kh1QTERGkZQENG0KPH0K7N8PtGuXv+zwYaBjR8DODjh7Vt5f7OyHfOnpQM+eysKWhcskqOaucXUFdu6UdmIgl+PQlT7f3zpfljp48CC2bt2q0fbzzz+jXr16cHV1xdixY5GVlVW2iImIjOTOHeUXek6O8gv88GFlu+oLPSdHufzOHdPGaWzsh3xyqegtl+MwBp2Tm3nz5uHs2bPq56dPn8aoUaPQrVs3zJw5E3/88QcWLlxolCCJiMqqbVvlmQorq/wv9uXL87/QrayUy7VdqpET9kM+T8/8uWhUicGBA5qzDcfESP+OJ7kchzHofFnKw8MDf/zxB9q0aQMAeOedd7Bv3z7s378fALBu3TrMmTMH586dM160BsDLUkSVU8EzFCqqL/SCl2jkjv2QTy4VveVyHKUxymWpBw8ewM3NTf1837596NWrl/p527ZtkcxCGkQkUe3aAUuXarYtXVr5vtDZD/lUFb0LMseK3nI5DkPSOblxc3NDYmIiACA7OxvHjx9H+/bt1cszMjJgbW1t+AiJiAzg8GFgwgTNtgkT8seeVBbsh3zJycCwYZptw4aZX8FLuRyHIemc3PTu3RszZ85EbGwsZs2aBXt7e3QqUK361KlT8PPzM0qQRETlUfBSjJUV8O23mmNPKssXO/shn1wqesvlOAxO12qc//77r+jUqZNQKBTC0dFRREVFaSzv0qWLePvtt/Up8GkSkqsKTkRGdeSIEFZWyirNVlZCHDqkbD90SLP9yBHTxmls7Id8cqnoLZfj0JU+3986T+JXs2ZN/P3330hPT4eDgwMsCxV1XLduHRwcHAycehERlY+bm3L+lsLzu7Rrp3yumt+lwJBCWWI/5FNV9Aa0V/RWzQ8j9YrecjkOY+AkfkQke5yZV4n9kE8uM/vK5Th0oc/3N5MbIiIikjyj3ApOREREZA6Y3BAREZGsMLkhkqD0dOX1cm1u3FAuryyk0BdJScoxKdrExyuXVwQp9AWROWByQyQxqkq/ISFF56hITla29+xZOb7IpNAXqmrawcFF54E5fFjZ3rSp8RMcKfQFkblgckMkMaz0m08KfSGVatpS6Asic8HkhkhiWOk3nxT6QirVtKXQF0TmgreCE0lUZan0qwsp9IVUqmlLoS+ITIG3ghPJACv95pNCX0ilmrYU+oJI6pjcEEkUK/3mk0JfSKWathT6gkjqmNwQSRAr/eaTQl9IpZq2FPqCyBwwuSGSmBs3ig4SDQ4uOpi0uPlO5EQKfREfX3Tw8LhxRQcZFzcPjqFIoS+IzAWTGyKJUVX6LTxIVFXp19e38lT6lUJfqKppFx48rKqmbWVVMdW0pdAXROaCd0sRSVBlqvRbGin0hVSqaUuhL4hMhVXBS8DkhoiIyPzwVnAiIiKqtJjcEBERkawwuSEio5FKFevyxiGV4yAi3TC5ISKjkEoV6/LGIZXjICLdMbkhIqOQShXr8sYhleMgIt0xuSEio5BKFevyxiGV4yAi3fFWcCIyKqlUsS5vHFI5DqLKireCE5FkSKWKdXnjkMpxEFHpmNwQkVFJpYp1eeOQynEQUemY3BCR0UilinV545DKcRCRbpjcEJFRSKWKdXnjkMpxEJHurEwdABHJk6qKNaC9inVoaMVUsS5vHFI5DiLSHe+WIiKjkUoV6/LGIZXjIKrM9Pn+5pkbIjIaZ+fiv/Qrcl6Y8sYhleMgIt1wzA0RERHJCpMbIiIikhUmN0QGxgrS+QzRF+xP+eF7SsZm0uRm4cKFaNu2LRwdHeHq6oqIiAhcuHChxG1WrlwJhUKh8bCzs6ugiIlKxgrS+QzRF+xP+eF7ShXBpMnNvn37MH78eBw6dAh79uzBs2fP0KNHDzx69KjE7ZycnHD79m314/r16xUUMVHJWEE6nyH6gv0pP3xPqUIICUlNTRUAxL59+4pdZ8WKFcLZ2bnMr5Geni4AiPT09DLvg6gkSUlC+PoKASh/xsVpPk9KMnWEFccQfcH+lB++p1QW+nx/S2rMTfr/n4esXr16ietlZmbC29sbXl5e6Nu3L86ePVvsullZWXj48KHGg8iYVJO7qWav7dBBc3bbylRo0RB9wf6UH76nZGySSW7y8vIwefJkdOjQAc2aNSt2vYYNG+LHH3/E5s2bsXr1auTl5SE4OBg3ihmdtnDhQjg7O6sfXvytoQrACtL5DNEX7E/54XtKxiSZGYpff/117NixA/v374enHrNiPXv2DI0bN8aQIUMwf/78IsuzsrKQlZWlfv7w4UN4eXlxhmIyqoLjB1Qq6/9KDdEX7E/54XtK+tJnhmJJnLmZMGECtm7diujoaL0SGwCwtrZGQEAALl++rHW5ra0tnJycNB5ExsQK0vkM0RfsT/nhe0rGZtLkRgiBCRMmYOPGjfjrr79Qr149vfeRm5uL06dPw8PDwwgREumHFaTzGaIv2J/yw/eUKoJJa0uNHz8ea9aswebNm+Ho6IiUlBQAgLOzM6pUqQIAGD58OOrUqYOFCxcCAObNm4f27dujfv36SEtLwyeffILr169j9OjRJjsOIhVWkM5niL5gf8oP31OqCCYdc6NQKLS2r1ixApGRkQCA0NBQ+Pj4YOXKlQCAt956C1FRUUhJSYGLiwtat26NDz74AAEBATq9JquCk7GxgnQ+Q/QF+1N++J5SWejz/S2ZAcUVhckNERGR+TG7AcVEREREhsLkhoiIiGSFyQ3JCqsNS0tSEhAfr31ZfLxyORGRoTG5IdlgtWFpSUoCmjZV3uZ7+LDmssOHle1NmzLBISLDY3JDssFqw9Jy5w7w9CmQkwN07Jif4Bw+rHyek6NcfueOaeMkIvlhckOy4elZdCKwAweKThim5yTYVEZt2wL79wNWVvkJzvLl+YmNlZVyedu2po6UiOSGt4KT7LBmjbQUPFOjokps2rUzXVxEZF54KzhVaqw2LC3t2gFLl2q2LV3KxIaIjIfJDclOcjIwbJhm27BhLMZnKocPAxMmaLZNmFB0kDERkaEwuSFZYbVhaSl4ScrKCvj2W80xOExwiMgYmNyQbLDasLTExxcdPDxuXNFBxsXNg0NEVFZMbkg2VNWGCw8eVlUb9vVlteGK5OYG2NkVHTzcrl1+gmNnp1yPiMiQeLcUyQqrDUtLUpJyHhttt3vHxysTm7p1Kz4uIjI/+nx/W1VQTEQVwtm5+OSF89tUvLp1i09eOL8NERkLL0sRERGRrDC5ISIiIllhciMnubnKkbO//qr8mZtr6ojMEiuLGw77krTh54KMjcmNXERFAT4+QFgY8Moryp8+Psp20hkrixsO+5K04eeCKgKTGzmIigIGDCj6X6GbN5XtTHB0xsrihsO+JG34uaCKwOTG3OXmApMmAdru6Fe1TZ7MS1Q6YmVxw2Ffkjb8XFBF4Dw35i4mRnkJqjTR0cq/HqQTVhY3HPYlacPPBemLVcErk9u3DbseAWBlcUNiX5I2/FyQMTG5MXceHoZdjwCwsrghsS9JG34uyJiY3Ji7Tp2UF6cVCu3LFQrlf4U6darYuMwYK4sbDvuStOHngoyNyY25s7QElixR/rtwgqN6/sUXyvWoVKwsbjjsS9KGnwuqCExu5KBfP2D9eqBOHc12T09le79+ponLDLGyuOGwL0kbfi6oIvBuKTnJzQViY5WDhz08lJeieMZGb6wsbjjsS9KGnwsqC32+v5ncEBERkeTxVnAiIiKqtJjcEBERkawwuSEiMhNSqKYthRiISsPkhojIDEihmrYUYiDSBZMbIiIzIIVq2lKIgUgXTG6IiMyAFKppSyEGIl3wVnAiIjMihWraUoiBKh/eCk5EJFNSqKYthRiISsLkhojIjEihmrYUYiAqCZMbIiIzIYVq2lKIgag0TG6IiMyAFKppSyEGIl1YmToAIiIqnaqaNqC9mnZoqPGraUshBiJd8G4pIiIzIYVq2lKIgSonfb6/eeaGiMhMODsXnzhU1NwyUoiBqDQcc0NERESywuSGiIiIZIXJDREREckKkxsiIiKSFSY3REREJCtMboiIiEhWmNwQERGRrDC5ISIiIllhckNERESywuSGiIiIZIXJDREREckKkxsiIiKSFSY3REREJCtMboiIiEhWmNwQERGRrDC5ISIiIllhckNUSHo6cOOG9mU3biiXExGRdJk0uVm4cCHatm0LR0dHuLq6IiIiAhcuXCh1u3Xr1qFRo0aws7ND8+bNsX379gqIliqD9HSgZ08gJARITtZclpysbO/ZkwkOEZGUmTS52bdvH8aPH49Dhw5hz549ePbsGXr06IFHjx4Vu82BAwcwZMgQjBo1CidOnEBERAQiIiJw5syZCoyc5CojA0hNBa5eBUJD8xOc5GTl86tXlcszMkwZJRERlUQhhBCmDkLl33//haurK/bt24fOnTtrXWfQoEF49OgRtm7dqm5r3749WrVqhW+//bbU13j48CGcnZ2Rnp4OJycng8VO8lEwkfH1BVatAoYNy38eEwN4eZk6SiKiykWf729JjblJ//9z/dWrVy92nYMHD6Jbt24abeHh4Th48KDW9bOysvDw4UONB1FJvLyUCYyvrzKh6dCBiQ0RkTmRTHKTl5eHyZMno0OHDmjWrFmx66WkpMDNzU2jzc3NDSkpKVrXX7hwIZydndUPL34zkQ68vJRnbApatYqJDRGROZBMcjN+/HicOXMGv/32m0H3O2vWLKSnp6sfyYVHiRJpkZysvBRV0LBhRQcZExGR9EgiuZkwYQK2bt2K6Oho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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Train and test the SVM classifier, play with regularization parameter C (either use the default value or try e.g. 200)"
      ],
      "metadata": {
        "id": "mu3qUUvHv1TP"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "HOo58lvZo_Lf"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "vpOHSYlCwdED"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Show support vectors in the 2D plot, plot the decision line from equation [w0 w1]*[x0 x1] + b = 0:"
      ],
      "metadata": {
        "id": "MshE_3pPwceK"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 235
        },
        "id": "MkZj_qEMvHeY",
        "outputId": "8ce5eb94-f2c8-4169-9894-80aac2daf302"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-2-0b43695d48ae>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0msupvectors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mSVMmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msupport_vectors_\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;31m# Plot the support vectors here\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;31m#Separating line coefficients:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'SVMmodel' is not defined"
          ]
        }
      ],
      "source": [
        "supvectors=SVMmodel.support_vectors_\n",
        "# Plot the support vectors here\n",
        "\n",
        "\n",
        "#Separating line coefficients:\n",
        "W=SVMmodel.coef_\n",
        "b=SVMmodel.intercept_\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TR9Kkzlrx6Pl"
      },
      "source": [
        "# Anomaly detection via SVM"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Import one-class SVM and generate data (Gaussian blobs in 2D-plane):"
      ],
      "metadata": {
        "id": "D6e44AnXmxZi"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.svm import OneClassSVM\n",
        "from sklearn.datasets import make_blobs\n",
        "from numpy import quantile, where, random\n",
        "\n",
        "random.seed(11)\n",
        "x, _ = make_blobs(n_samples=300, centers=1, cluster_std=.3, center_box=(4, 4))\n",
        "\n",
        "plt.scatter(x[:,0], x[:,1])\n",
        "plt.show()\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "kA9NeGTXm2Ry",
        "outputId": "9a3e0733-183d-4c18-bc7a-a04d40cb919c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Train one-class SVM and plot the outliers (outputs of prediction being equal to -1)"
      ],
      "metadata": {
        "id": "HrWy_Y9Sw41V"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "SVMmodelOne = OneClassSVM(kernel='rbf', gamma=0.001, nu=0.03)\n",
        "\n",
        "\n",
        "SVMmodelOne.fit(x)\n",
        "pred = SVMmodelOne.predict(x)\n",
        "anom_index = where(pred==-1)\n",
        "values = x[anom_index]\n",
        "\n",
        "plt.scatter(x[:,0], x[:,1])\n",
        "plt.scatter(values[:,0], values[:,1], color='red')\n",
        "plt.axis('equal')\n",
        "plt.show()\n",
        "\n"
      ],
      "metadata": {
        "id": "esEEn-KqoZic",
        "outputId": "2c0020b0-06d9-4a85-9420-26c8ca5c76a8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Plot the support vectors:"
      ],
      "metadata": {
        "id": "kIZmSPRGxNRK"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "RJcyvEHKsR8T"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "What if we want to have a control what is outlier? Use e.g. 5% \"quantile\" to mark the outliers. Every point with lower score than threshold will be an outlier."
      ],
      "metadata": {
        "id": "VbEUVj8RxS1p"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "scores = SVMmodelOne.score_samples(x)\n",
        "\n",
        "thresh = quantile(scores, 0.01)\n",
        "print(thresh)\n",
        "index = where(scores<=thresh)\n",
        "values = x[index]\n",
        "\n",
        "plt.scatter(x[:,0], x[:,1])\n",
        "plt.scatter(values[:,0], values[:,1], color='red')\n",
        "plt.axis('equal')\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "DQzxxUePs6sN",
        "outputId": "4793cfe0-625f-4479-d6ed-a22c3c084b05",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 235
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-3-96497469aca6>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mscores\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mSVMmodelOne\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscore_samples\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mthresh\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mquantile\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mscores\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0.01\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mthresh\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mindex\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mwhere\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mscores\u001b[0m\u001b[0;34m<=\u001b[0m\u001b[0mthresh\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'SVMmodelOne' is not defined"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "toc_visible": true,
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}